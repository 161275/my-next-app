# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
#   build:
#     runs-on: self-hosted
#     strategy:
#       matrix:
#         node-version: [18.x]
#         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
#     steps:
#     - uses: actions/checkout@v4
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - run: npm ci
#     - run: npm run build --if-present
#     - name: Verify .next exists
#       run: ls -la .next
#     - name: Debug check before upload
#       run: pwd && ls -la && ls -la .next
#     - name: Upload build output
#       uses: actions/upload-artifact@v4
#       with:
#         name: next-build
#         include-hidden-files: true
#         path: .next/
#         if-no-files-found: error
  build-and-push:
    runs-on: self-hosted

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT}}

      # 3. Set up Docker Buildx (optional but recommended)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # # 4. Extract short SHA for tagging
      # - name: Set image tags
      #   id: vars
      #   run: |
      #     echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      #     echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      # 5. Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/my-next-app:latest
    
  # docker_build_and_push :
  #   # needs: build
  #   runs-on: self-hosted
  #   steps:
  #   - name: checkout
  #     uses: actions/checkout@v4
  #   # - name: Download build artifact
  #   #   uses: actions/download-artifact@v4
  #   #   with:
  #   #     include-hidden-files: true
  #   #     name: next-build
  #   #     path: .next
  #   # - name: Debug check before build
  #   #   run: pwd && ls -la && ls -la .next
  #   - name: build docker image
  #     run: docker build . --tag ghcr.io/${{ github.repository_owner }}/my-next-app:latest --platform linux/amd64
  #   - name: push image GHCR
  #     run: | 
  #         docker login ghcr.io --username ${{ github.actor }} --password ${{ secrets.GH_PAT }}
  #         docker push ghcr.io/${{ github.repository_owner }}/my-next-app:latest

  deploy_on_kubernetes:
    # needs: docker_build_and_push
    needs: build-and-push
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy app
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

